package comp.Game;


import java.awt.BorderLayout;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import javax.swing.JFrame;

import org.psnbtech.Game;
import org.psnbtech.WorldPanel;

import org.psnbtech.entity.Asteroid;
import org.psnbtech.entity.Entity;
import org.psnbtech.entity.Player;

import org.psnbtech.util.Clock;

public class GameImp extends JFrame implements IGameImp
{
	private GameArch _arch;

	/**
	 * The Serial Version Unique Identifier.
	 */
	private static final long serialVersionUID = -3535839203174039672L;

	/**
	 * The WorldPanel instance.
	 */
	private WorldPanel world;
	
	/**
	 * The Clock instance for handling the game updates.
	 */
	public Clock logicTimer;
	
	/**
	 * The Random instance for spawning entities.
	 */
	private Random random;
	
	/**
	 * The list of Entity objects that exist in the game world.
	 */
	private List<Entity> entities;
	
	/**
	 * The list of Entity objects that need to be added to the game world.
	 */
	private List<Entity> pendingEntities;
		
	/**
	 * The Player instance.
	 */
	public Player player1;
	
	public Player player2;
	
	
	/**
	 * <p>The death cooldown timer is responsible for spreading a Player's death
	 * out over time, so the player does not instantly spawn.</p>
	 * 
	 * <p>Upon death, this value is set to {@code DEATH_COOLDOWN_LIMIT}, and is
	 * decremented each frame.</p>
	 * 
	 * <p>Once the value reaches {@code RESPAWN_COOLDOWN_LIMIT}, the player's ship
	 * will be reset and the player will regain the ability to move.</p>
	 * 
	 * <p>Once the value reaches {@code INVULN_COOLDOWN_LIMIT}, the Player's ship
	 * will be vulnerable to collisions and the Player will regain the ability to
	 * shoot.</p>
	 */
	public int deathCooldown;
	
	/**
	 * <p>The show level cooldown timer is responsible for displaying the current
	 * level briefly after the previous level has been completed.</p>
	 */
	public int showLevelCooldown;
	
	/**
	 * <p>The reset cooldown prevents the game from instantly restarting if the
	 * player is pressing any keys upon death, as key events are continuously
	 * fired until the player lets go of the key.</p>
	 * 
	 * <p>This timer adds a short delay that must expire before the game can
	 * be reset, giving the player time to react.</p>
	 */
	public int restartCooldown;
	
	
	/**
	 * The current level the player is on.
	 */
	private int level;
	
	/**
	 * Whether or not the game is over.
	 */
	public boolean isGameOver;
	
	/**
	 * Whether or not the player has pressed anything to restart the game.
	 */
	private boolean restartGame;
	
    public GameImp (){

		//Initialize the window's basic properties.
		super("Asteroids");
		setLayout(new BorderLayout());
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setResizable(false);
		
		//Create and add the WorldPanel instance to the window.
		add(this.world = new WorldPanel(this), BorderLayout.CENTER);
		
		/*
		 * Here we add a key listener to the window so that we can process incoming
		 * user input.
		 * 
		 * Because the player is updated every cycle, rather than when it receives
		 * input (like I did for Tetris), we're only going to set a flag to indicate
		 * the current input state. The actual change in the player's entity's state
		 * will be handled in the game loop.
		 * 
		 * The reason we do this is simple. Events are only fired when input is received
		 * from the user. While the keyPressed event is continuously fired, it isn't
		 * necessarily going to be in sync with our main thread, which would cause
		 * all sorts of unpredictable behavior from our ship.
		 * 
		 * Note that any "pressed" event will restart the game rather than change the
		 * ship's state if the conditions are met.
		 */
		addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				//Determine which key was pressed.
				switch(e.getKeyCode()) {
				
				//Indicate that we want to apply thrust to our ship.
				case KeyEvent.VK_W:
					if(!checkForRestart()) {
						player2.setThrusting(true);
					}
					break;
				case KeyEvent.VK_UP:
					if(!checkForRestart()) {
						player1.setThrusting(true);
					}
					break;
					
				//Indicate that we want to rotate our ship to the left.
				case KeyEvent.VK_A:
					if(!checkForRestart()) {
						player2.setRotateLeft(true);
					}
					break;
				case KeyEvent.VK_LEFT:
					if(!checkForRestart()) {
						player1.setRotateLeft(true);
					}
					break;
					
				//Indicate that we want to rotate our ship to the right.
				case KeyEvent.VK_D:
					if(!checkForRestart()) {
						player2.setRotateRight(true);
					}
					break;
				case KeyEvent.VK_RIGHT:
					if(!checkForRestart()) {
						player1.setRotateRight(true);
					}
					break;
					
				case KeyEvent.VK_DOWN:
					if(!checkForRestart()) {
						player1.setFiring(true);
					}
					break;
				//Indicate that we want our ship to fire bullets.
				case KeyEvent.VK_SPACE:
					if(!checkForRestart()) {
						player2.setFiring(true);
					}
					break;
					
				//Indicate that we want to pause the game.
				case KeyEvent.VK_P:
					if(!checkForRestart()) {
						logicTimer.setPaused(!logicTimer.isPaused());
					}
					break;
			
					
				//Handle all other key presses.
				default:
					checkForRestart();
					break;
					
				}
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				switch(e.getKeyCode()) {

				//Indicate that we no long want to apply thrust to the ship.
				case KeyEvent.VK_W:
					player2.setThrusting(false);
					break;
				case KeyEvent.VK_UP:
					player1.setThrusting(false);
					break;
				
				//Indicate that we no longer want to rotate our ship left.
				case KeyEvent.VK_A:
					player2.setRotateLeft(false);
					break;
				case KeyEvent.VK_LEFT:
					player1.setRotateLeft(false);
					break;

				//Indicate that we no longer want to rotate our ship right.
				case KeyEvent.VK_D:
					player2.setRotateRight(false);
					break;
				case KeyEvent.VK_RIGHT:
					player1.setRotateRight(false);
					break;
					
				//Indicate that we no long want to fire bullets.
				case KeyEvent.VK_SPACE:
					player2.setFiring(false);
					break;
				case KeyEvent.VK_DOWN:
					player1.setFiring(false);
					break;	
				}
			}
		});
		
		//Resize the window to the correct size, position it in the center of the screen, and display it.
		pack();
		setLocationRelativeTo(null);
		setVisible(true);
	
    }

	public void setArch(GameArch arch){
		_arch = arch;
	}
	public GameArch getArch(){
		return _arch;
	}

	/*
  	  Myx Lifecycle Methods: these methods are called automatically by the framework
  	  as the bricks are created, attached, detached, and destroyed respectively.
	*/	
	public void init(){
	    //TODO Auto-generated method stub
	}
	public void begin(){
		//TODO Auto-generated method stub
		
	}
	public void end(){
		//TODO Auto-generated method stub
	}
	public void destroy(){
		//TODO Auto-generated method stub
	}

	/*
  	  Implementation primitives required by the architecture
	*/
  
    //To be imported: BorderLayout,KeyAdapter,KeyEvent,ArrayList,Iterator,LinkedList,List,Random,Game,WorldPanel,Asteroid,Entity,Player,Clock,GameArch
    public void startGame ()   {
		//TODO Auto-generated method stub
		
    }
    public void killPlayer ()   {
		//TODO Auto-generated method stub
		
    }
    public void resetGame ()   {
		//TODO Auto-generated method stub
		
    }
    public void resetEntityLists ()   {
		//TODO Auto-generated method stub
		
    }
    public boolean areEnemiesDead ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public boolean checkForRestart ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public void startGameExecution ()   {
		//TODO Auto-generated method stub
		
    }
    public void updateGame ()   {
		//TODO Auto-generated method stub
		
    }
    public void setArchData (GameArch _arch)   {
		//TODO Auto-generated method stub
		
    }
    public void registerEntity (Entity entity)   {
		//TODO Auto-generated method stub
		
    }
    public boolean isGameOver ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public boolean isPlayerInvulnerable ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public boolean canDrawPlayer ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public int getLevel ()   {
		//TODO Auto-generated method stub
		return 0;
    }
    public boolean isPaused ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public boolean isShowingLevel ()   {
		//TODO Auto-generated method stub
		return false;
    }
    public Random getRandom ()   {
		//TODO Auto-generated method stub
		return null;
    }
    public List<Entity> getEntities ()   {
		//TODO Auto-generated method stub
		return null;
    }
    public Player getPlayer1 ()   {
		//TODO Auto-generated method stub
		return null;
    }
    public Player getPlayer2 ()   {
		//TODO Auto-generated method stub
		return null;
    }
}