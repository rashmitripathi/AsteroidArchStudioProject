package edu.umkc.asteroid.archInterfaces;

import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.psnbtech.Game;
import org.psnbtech.WorldPanel;
import org.psnbtech.entity.Asteroid;
import org.psnbtech.entity.Bullet;
import org.psnbtech.entity.Entity;
import org.psnbtech.entity.Player;
import org.psnbtech.util.Vector2;

public interface IPlayer {
	

	
	public static final double DEFAULT_ROTATION = -Math.PI / 2.0;
	
	/**
	 * The magnitude of our ship's thrust.
	 */
	public static final double THRUST_MAGNITUDE = 0.0385;
	
	/**
	 * The maximum speed at which our ship can travel.
	 */
	public static final double MAX_VELOCITY_MAGNITUDE = 6.5;
	
	/**
	 * The speed at which the ship rotates.
	 */
	public static final double ROTATION_SPEED = 0.052;
	
	/**
	 * The factor at which our ship slows down.
	 */
	public static final double SLOW_RATE = 0.995;
	
	/**
	 * The maximum number of bullets that can be fired at once.
	 */
	public static final int MAX_BULLETS = 4;
	
	/**
	 * The number of cycles that must elapse between shots.
	 */
	public static final int FIRE_RATE = 4;
	
	/**
	 * The maximum number of shots that can be fired consecutively before
	 * overheating.
	 */
	public static final int MAX_CONSECUTIVE_SHOTS = 8;
	
	/**
	 * The number of cycles that must elapse before we stop overheating.
	 */
	public static final int MAX_OVERHEAT = 30;
	
	/**
	 * Whether the ship should apply thrust when it updates.
	 */
	public boolean thrustPressed;
	
	/**
	 * Whether the ship should rotate to the left when it updates.
	 */
	public boolean rotateLeftPressed;
	
	/**
	 * Whether the ship should rotate to the right when it updates.
	 */
	public boolean rotateRightPressed;
	
	/**
	 * Whether the ship should fire a bullet when it updates.
	 */
	public boolean firePressed;
		
	/**
	 * Whether the ship is allowed to fire a bullet.
	 */
	public boolean firingEnabled;
	
	
	/**
	 * The number of lives the Player has left.
	 */
	public int lives;
	
	/**
	 * The current score.
	 */
	public int score;
	
	
	/**
	 * <p>The death cooldown timer is responsible for spreading a Player's death
	 * out over time, so the player does not instantly spawn.</p>
	 * 
	 * <p>Upon death, this value is set to {@code DEATH_COOLDOWN_LIMIT}, and is
	 * decremented each frame.</p>
	 * 
	 * <p>Once the value reaches {@code RESPAWN_COOLDOWN_LIMIT}, the player's ship
	 * will be reset and the player will regain the ability to move.</p>
	 * 
	 * <p>Once the value reaches {@code INVULN_COOLDOWN_LIMIT}, the Player's ship
	 * will be vulnerable to collisions and the Player will regain the ability to
	 * shoot.</p>
	 */
	public int deathCooldown;
	
	
	
	
	/**
	 * The number of consecutive shots fired.
	 */
	public int consecutiveShots;
	
	/**
	 * The cooldown timer for firing.
	 */
	public int fireCooldown;
	
	/**
	 * The cooldown timer for overheating.
	 */
	public int overheatCooldown;
	
	/**
	 * The current animation frame.
	 */
	public int animationFrame;
	
	/**
	 * The bullets that have been fired.
	 */
	public List<Bullet> bullets;
	
	
	
	/**
	 * Sets whether this player should apply thrust when it updates.
	 * @param state Whether to apply thrust.
	 */
	public void setThrusting(boolean state);
	
	/**
	 * Sets whether this player should rotate left when it updates.
	 * @param state Whether to rotate left.
	 */
	public default void setRotateLeft(boolean state) {
	}
	
	/**
	 * Sets whether this player should rotate right when it updates.
	 * @param state Whether to rotate right.
	 */
	public void setRotateRight(boolean state);
	
	/**
	 * Sets whether this player should fire when it updates.
	 * @param state Whether to fire.
	 */
	public void setFiring(boolean state);
		
	/**
	 * Sets whether this player can fire when it updates.
	 * @param state Whether this player can fire.
	 */
	public void setFiringEnabled(boolean state);
	
	/**
	 * Resets the player to it's default spawn position, speed, and rotation,
	 * and clears the list of bullets.
	 */
	public void reset();		
	
	public void update(Game game);	
	
	public void handleCollision(Game game, Entity other);
	
	/**
	 * Add to the current score.
	 * @param score The number of points to add.
	 */
	public void addScore(int score);
	/**
	 * Gets the current score.
	 * @return The current score.
	 */
	public int getScore();
	
	public void draw(Graphics2D g, Game game);
	
    public Player createPlayer();
	
	
		

}
