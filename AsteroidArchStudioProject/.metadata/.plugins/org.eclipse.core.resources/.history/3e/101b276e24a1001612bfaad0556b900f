package edu.umkc.asteroid.archInterfaces;

import java.awt.BorderLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import org.psnbtech.Game;
import org.psnbtech.WorldPanel;
import org.psnbtech.entity.Asteroid;
import org.psnbtech.entity.Entity;
import org.psnbtech.entity.Player;
import org.psnbtech.util.Clock;

public interface IGame {
	
	public void startGame();
	
	public void killPlayer();	
	
	public default boolean checkForRestart();
	
	private void updateGame() {}
	
	
	private void resetGame() {}
	
	/**
	 * Removes all entities, with the exception of the player, from the world.
	 */
	private void resetEntityLists() {}
	
	
	
	/**
	 * Determines whether or not any asteroids still exist in the world.
	 * @return Whether or not all of the enemies are dead.
	 */
	private boolean areEnemiesDead() {}
	
	
		//Decrement the number of lives that we still have.
		
	   /*
		 * If there are no lives remaining, prepare the game over state variables,
		 * otherwise prepare the death cooldown.
		 * 
		 * Note that death cooldown is set to Integer.MAX_VALUE in the event of a
		 * game over. While finite, the amount of time it would take for it to
		 * reach zero is far longer than anyone would care to run the program
		 * for.
		 */
		if(this.getPlayer1().lives == 0 && this.getPlayer2().lives == 0) {
			this.isGameOver = true;
			this.restartCooldown = RESET_COOLDOWN_LIMIT;
			this.deathCooldown = Integer.MAX_VALUE;
		}else if(this.getPlayer1().lives==0 ||this.getPlayer2().lives==0){
			resetEntityLists();
		}
		else {
			this.deathCooldown = DEATH_COOLDOWN_LIMIT;
		}
	
		
	}
	
	
	
	/**
	 * Adds a new entity to the game world.
	 * @param entity The entity to add.
	 */
	public void registerEntity(Entity entity) {
		pendingEntities.add(entity);
	}
	
	/**
	 * Whether or not we are in the game over state.
	 * @return Whether or not the game is over.
	 */
	public boolean isGameOver() {
		return isGameOver;
	}
	
	/**
	 * Determines whether or not the player is invulnerable.
	 * @return Whether or not the player is invulnerable.
	 */
	public boolean isPlayerInvulnerable() {
		return (deathCooldown > INVULN_COOLDOWN_LIMIT);
	}
	
	/**
	 * Determines whether or not the player can be drawn.
	 * @return Whether or not the player can be drawn.
	 */
	public boolean canDrawPlayer() {
		return (deathCooldown <= RESPAWN_COOLDOWN_LIMIT);
	}
	
	
	
	/**
	 * Gets the number of lives remaining.
	 * @return The number of lives remaining.
	 *//*
	public int getLives() {
		return lives1;
	}*/
	
	/**
	 * Gets the current level.
	 * @return The current level.
	 */
	public int getLevel() {
		return level;
	}
	
	/**
	 * Gets whether or not the game is paused.
	 * @return Whether or not the game is paused.
	 */
	public boolean isPaused() {
		return logicTimer.isPaused();
	}
	
	/**
	 * Gets whether or not the level is being shown.
	 * @return Whether or not the level is being shown.
	 */
	public boolean isShowingLevel() {
		return (showLevelCooldown > 0);
	}

	/**
	 * Gets the Random instance.
	 * @return The Random instance.
	 */
	public Random getRandom() {
		return random;
	}
	
	/**
	 * Gets the list of Entities in the world.
	 * @return The Entity list.
	 */
	public List<Entity> getEntities() {
		return entities;
	}
	
	/**
	 * Gets the Player instance.
	 * @return
	 */
	public Player getPlayer1() {
		return player1;
	}
	
	/**
	 * Gets the Player instance.
	 * @return
	 */
	public Player getPlayer2() {
		return player2;
	}
	
	

}
